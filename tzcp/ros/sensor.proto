syntax = "proto3";

import "ros/std.proto";
import "ros/geometry.proto";

package tz.ros.sensor; // definition from ros msg - sensor_msgs

message LaserScan {
    tz.ros.std.Header header = 1;
    float angle_min = 2;
    float angle_max = 3;
    float angle_increment = 4;
    float time_increment = 5;
    float scan_time = 6;
    float range_min = 7;
    float range_max = 8;
    repeated float ranges = 9;
    repeated float intensities = 10;
}

message RegionOfInterest{
    uint32 x_offset = 1;
    uint32 y_offset = 2;
    uint32 height = 3;
    uint32 width = 4;
    bool do_rectify = 5;
}

message CameraInfo {
    // # This message defines meta information for a camera. It should be in a
    // # camera namespace on topic "camera_info" and accompanied by up to five
    // # image topics named:
    // #
    // #   image_raw - raw data from the camera driver, possibly Bayer encoded
    // #   image            - monochrome, distorted
    // #   image_color      - color, distorted
    // #   image_rect       - monochrome, rectified
    // #   image_rect_color - color, rectified
    // #
    // # The image_pipeline contains packages (image_proc, stereo_image_proc)
    // # for producing the four processed image topics from image_raw and
    // # camera_info. The meaning of the camera parameters are described in
    // # detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.
    // #
    // # The image_geometry package provides a user-friendly interface to
    // # common operations using this meta information. If you want to, e.g.,
    // # project a 3d point into image coordinates, we strongly recommend
    // # using image_geometry.
    // #
    // # If the camera is uncalibrated, the matrices D, K, R, P should be left
    // # zeroed out. In particular, clients may assume that K[0] == 0.0
    // # indicates an uncalibrated camera.

    // #######################################################################
    // #                     Image acquisition info                          #
    // #######################################################################

    // # Time of image acquisition, camera coordinate frame ID
    // Header header    # Header timestamp should be acquisition time of image
    //                 # Header frame_id should be optical frame of camera
    //                 # origin of frame should be optical center of camera
    //                 # +x should point to the right in the image
    //                 # +y should point down in the image
    //                 # +z should point into the plane of the image
    tz.ros.std.Header header = 1;

    // #######################################################################
    // #                      Calibration Parameters                         #
    // #######################################################################
    // # These are fixed during camera calibration. Their values will be the #
    // # same in all messages until the camera is recalibrated. Note that    #
    // # self-calibrating systems may "recalibrate" frequently.              #
    // #                                                                     #
    // # The internal parameters can be used to warp a raw (distorted) image #
    // # to:                                                                 #
    // #   1. An undistorted image (requires D and K)                        #
    // #   2. A rectified image (requires D, K, R)                           #
    // # The projection matrix P projects 3D points into the rectified image.#
    // #######################################################################

    // # The image dimensions with which the camera was calibrated. Normally
    // # this will be the full camera resolution in pixels.
    // uint32 height
    // uint32 width
    uint32 height = 2;
    uint32 width = 3;
    // # The distortion model used. Supported models are listed in
    // # sensor_msgs/distortion_models.h. For most cameras, "plumb_bob" - a
    // # simple model of radial and tangential distortion - is sufficient.
    // string distortion_model
    string distortion_model = 4;
    // # The distortion parameters, size depending on the distortion model.
    // # For "plumb_bob", the 5 parameters are: (k1, k2, t1, t2, k3).
    // float64[] D
    repeated float D = 5;
    // # Intrinsic camera matrix for the raw (distorted) images.
    // #     [fx  0 cx]
    // # K = [ 0 fy cy]
    // #     [ 0  0  1]
    // # Projects 3D points in the camera coordinate frame to 2D pixel
    // # coordinates using the focal lengths (fx, fy) and principal point
    // # (cx, cy).
    // float64[9]  K # 3x3 row-major matrix
    repeated float K = 6;
    // # Rectification matrix (stereo cameras only)
    // # A rotation matrix aligning the camera coordinate system to the ideal
    // # stereo image plane so that epipolar lines in both stereo images are
    // # parallel.
    // float64[9]  R # 3x3 row-major matrix
    repeated float R = 7;
    // # Projection/camera matrix
    // #     [fx'  0  cx' Tx]
    // # P = [ 0  fy' cy' Ty]
    // #     [ 0   0   1   0]
    // # By convention, this matrix specifies the intrinsic (camera) matrix
    // #  of the processed (rectified) image. That is, the left 3x3 portion
    // #  is the normal camera intrinsic matrix for the rectified image.
    // # It projects 3D points in the camera coordinate frame to 2D pixel
    // #  coordinates using the focal lengths (fx', fy') and principal point
    // #  (cx', cy') - these may differ from the values in K.
    // # For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will
    // #  also have R = the identity and P[1:3,1:3] = K.
    // # For a stereo pair, the fourth column [Tx Ty 0]' is related to the
    // #  position of the optical center of the second camera in the first
    // #  camera's frame. We assume Tz = 0 so both cameras are in the same
    // #  stereo image plane. The first camera always has Tx = Ty = 0. For
    // #  the right (second) camera of a horizontal stereo pair, Ty = 0 and
    // #  Tx = -fx' * B, where B is the baseline between the cameras.
    // # Given a 3D point [X Y Z]', the projection (x, y) of the point onto
    // #  the rectified image is given by:
    // #  [u v w]' = P * [X Y Z 1]'
    // #         x = u / w
    // #         y = v / w
    // #  This holds for both images of a stereo pair.
    // float64[12] P # 3x4 row-major matrix
    repeated float P = 8;

    // #######################################################################
    // #                      Operational Parameters                         #
    // #######################################################################
    // # These define the image region actually captured by the camera       #
    // # driver. Although they affect the geometry of the output image, they #
    // # may be changed freely without recalibrating the camera.             #
    // #######################################################################

    // # Binning refers here to any camera setting which combines rectangular
    // #  neighborhoods of pixels into larger "super-pixels." It reduces the
    // #  resolution of the output image to
    // #  (width / binning_x) x (height / binning_y).
    // # The default values binning_x = binning_y = 0 is considered the same
    // #  as binning_x = binning_y = 1 (no subsampling).
    // uint32 binning_x
    // uint32 binning_y
    uint32 binning_x = 9;
    uint32 binning_y = 10;
    // # Region of interest (subwindow of full camera resolution), given in
    // #  full resolution (unbinned) image coordinates. A particular ROI
    // #  always denotes the same window of pixels on the camera sensor,
    // #  regardless of binning settings.
    // # The default setting of roi (all values 0) is considered the same as
    // #  full resolution (roi.width = width, roi.height = height).
    // RegionOfInterest roi
    tz.ros.sensor.RegionOfInterest roi = 11;
}

message Image{
    // # This message contains an uncompressed image
    // # (0, 0) is at top-left corner of image
    // #

    // Header header        # Header timestamp should be acquisition time of image
    //                     # Header frame_id should be optical frame of camera
    //                     # origin of frame should be optical center of camera
    //                     # +x should point to the right in the image
    //                     # +y should point down in the image
    //                     # +z should point into to plane of the image
    //                     # If the frame_id here and the frame_id of the CameraInfo
    //                     # message associated with the image conflict
    //                     # the behavior is undefined
    tz.ros.std.Header header = 1;
    // uint32 height         # image height, that is, number of rows
    // uint32 width          # image width, that is, number of columns
    uint32 height = 2;
    uint32 width = 3;
    
    // # The legal values for encoding are in file src/image_encodings.cpp
    // # If you want to standardize a new string format, join
    // # ros-users@lists.sourceforge.net and send an email proposing a new encoding.

    // string encoding       # Encoding of pixels -- channel meaning, ordering, size
    //                     # taken from the list of strings in include/sensor_msgs/image_encodings.h
    string encoding = 4;
    // uint8 is_bigendian    # is this data bigendian?
    // uint32 step           # Full row length in bytes
    // uint8[] data          # actual matrix data, size is (step * rows)
    uint32 is_bigendian = 5;
    uint32 step = 6;
    bytes data = 7;
}

message IMU{
    // # This is a message to hold data from an IMU (Inertial Measurement Unit)
    // #
    // # Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
    // #
    // # If the covariance of the measurement is known, it should be filled in (if all you know is the 
    // # variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
    // # A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
    // # data a covariance will have to be assumed or gotten from some other source
    // #
    // # If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation 
    // # estimate), please set element 0 of the associated covariance matrix to -1
    // # If you are interpreting this message, please check for a value of -1 in the first element of each 
    // # covariance matrix, and disregard the associated estimate.
    tz.ros.std.Header header = 1;
    tz.ros.geometry.Quaternion orientation = 2;
    repeated float orientation_covariance = 3;
    tz.ros.geometry.Vector3 angular_velocity = 4;
    repeated float angular_velocity_covariance = 5;
    tz.ros.geometry.Vector3 linear_acceleration = 6;
    repeated float linear_acceleration_covariance = 7;
}