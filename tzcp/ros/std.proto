syntax = "proto3";

package tz.ros.std; // definition from ros msg - std_msgs - https://docs.ros.org/en/noetic/api/std_msgs/html/index-msg.html

// basic types

message Bool {
    bool data = 1;
}

message Byte {
    uint32 data = 1; // protobuf has no byte type
}

message Char {
    uint32 data = 1; // protobuf has no char type
}

message Float32 {
    float data = 1;
}

message Float64 {
    double data = 1;
}

message Int8 {
    int32 data = 1; // protobuf has no int8 type
}

message Int16 {
    int32 data = 1; // protobuf has no int16 type
}

message Int32 {
    int32 data = 1;
}

message Int64 {
    int64 data = 1;
}

message UInt8 {
    uint32 data = 1; // protobuf has no uint8 type
}

message UInt16 {
    uint32 data = 1; // protobuf has no uint16 type
}

message UInt32 {
    uint32 data = 1;
}

message UInt64 {
    uint64 data = 1;
}

message String {
    string data = 1;
}

message ColorRGBA {
    float r = 1;
    float g = 2;
    float b = 3;
    float a = 4;
}

message Duration {
    int32 secs = 1;
    int32 nsecs = 2;
}

message Empty {
}

message Time {
    int32 secs = 1;
    int32 nsecs = 2;
}

message Header {
    uint32 seq = 1;
    float stamp = 2;
    string frame_id = 3;
}

// array pre definitions

message MultiArrayDimension {
    // string label   # label of given dimension
    string label = 1;
    // uint32 size    # size of given dimension (in type units)
    uint32 size = 2;
    // uint32 stride  # stride of given dimension
    uint32 stride = 3;
}

message MultiArrayLayout {
    // # The multiarray declares a generic multi-dimensional array of a
    // # particular data type.  Dimensions are ordered from outer most
    // # to inner most.

    // MultiArrayDimension[] dim # Array of dimension properties
    repeated MultiArrayDimension dim = 1;
    // uint32 data_offset        # padding elements at front of data
    uint32 data_offset = 2;

    // # Accessors should ALWAYS be written in terms of dimension stride
    // # and specified outer-most dimension first.
    // # 
    // # multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
    // #
    // # A standard, 3-channel 640x480 image with interleaved color channels
    // # would be specified as:
    // #
    // # dim[0].label  = "height"
    // # dim[0].size   = 480
    // # dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
    // # dim[1].label  = "width"
    // # dim[1].size   = 640
    // # dim[1].stride = 3*640 = 1920
    // # dim[2].label  = "channel"
    // # dim[2].size   = 3
    // # dim[2].stride = 3
    // #
    // # multiarray(i,j,k) refers to the ith row, jth column, and kth channel.
}

// array types

message ByteMultiArray {
    MultiArrayLayout layout = 1;
    bytes data = 2;
}

message UInt32MultiArray {
    MultiArrayLayout layout = 1;
    repeated uint32 data = 2;
}

message UInt64MultiArray {
    MultiArrayLayout layout = 1;
    repeated uint64 data = 2;
}

message Int32MultiArray {
    MultiArrayLayout layout = 1;
    repeated int32 data = 2;
}

message Int64MultiArray {
    MultiArrayLayout layout = 1;
    repeated int64 data = 2;
}

message Float32MultiArray {
    MultiArrayLayout layout = 1;
    repeated float data = 2;
}

message Float64MultiArray {
    MultiArrayLayout layout = 1;
    repeated double data = 2;
}